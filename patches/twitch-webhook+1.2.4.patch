diff --git a/node_modules/twitch-webhook/src/index.js b/node_modules/twitch-webhook/src/index.js
index f8938f0..dc46786 100755
--- a/node_modules/twitch-webhook/src/index.js
+++ b/node_modules/twitch-webhook/src/index.js
@@ -40,6 +40,10 @@ class TwitchWebhook extends EventEmitter {
 
     if (!options.callback) {
       throw new errors.FatalError('Callback URL not provided!')
+	}
+
+    if (!options.tokenPromise) {
+      throw new errors.FatalError('Token promise not provided!')
     }
 
     super()
@@ -147,6 +151,7 @@ class TwitchWebhook extends EventEmitter {
    * @return {Promise}
    */
   _request (mode, topic, options) {
+	console.log("called _request")
     if (!isAbsoluteUrl(topic)) {
       topic = this._apiUrl + topic
     }
@@ -173,19 +178,22 @@ class TwitchWebhook extends EventEmitter {
         .digest('hex')
 
       requestOptions.qs['hub.secret'] = secret
-    }
-
-    return request
-      .post(requestOptions)
-      .catch(err => {
-        throw new errors.RequestDenied(err)
-      })
-      .then(response => {
-        this._subscriptions[topic] = {}
-        if (this._options.secret) {
-          this._subscriptions[topic].secret = requestOptions.qs['hub.secret']
-        }
-      })
+	}
+
+	console.log('before token promise', requestOptions)
+
+    return this._options.tokenPromise().then(token => {
+      requestOptions.headers['Authorization'] = `Bearer ${token}`
+      console.log('after token promise', requestOptions)
+      return request.post(requestOptions)
+    }).catch(err => {
+      throw new errors.RequestDenied(err)
+    }).then(response => {
+      this._subscriptions[topic] = {}
+      if (this._options.secret) {
+        this._subscriptions[topic].secret = requestOptions.qs['hub.secret']
+      }
+    })
   }
 
   /**
@@ -197,6 +205,7 @@ class TwitchWebhook extends EventEmitter {
    * @return {Promise}
    */
   subscribe (topic, options = {}) {
+	console.log("called subscribe")
     return this._request('subscribe', topic, options)
   }
 
